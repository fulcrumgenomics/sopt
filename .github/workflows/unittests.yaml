name: unit tests

on:
  push:
  pull_request:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true
      SONATYPE_USER:
        required: false
      SONATYPE_PASS:
        required: false

concurrency:
  group: unittest-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jvm: ["temurin:1.8.0-442", "temurin:1.11.0.27", "temurin:1.17.0.15", "temurin:1.21.0.7", "temurin:1.22.0.2"]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Setup cache
        uses: coursier/cache-action@4e2615869d13561d626ed48655e1a39e5b192b3c # v6.4.7
      - name: setup Scala
        uses: coursier/setup-action@039f736548afa5411c1382f40a5bd9c2d30e0383 # v1.3.9
        with:
          apps: scala:2.13.14 scalac:2.13.14 scaladoc:2.13.14 sbt:1.11.2
          jvm: ${{ matrix.jvm }}
      - name: Unit Tests
        run: |
          set -e
          sbt clean coverage test
          sbt coverageReport coverageAggregate
      - name: Code Coverage
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d  # v5.4.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
                # while the "docs" job below tests building the online docs, this is added here
      # to fail-fast when docs are not correctly written.
      - name: Ensure docs will compile (fast-fail)
        run: |
          set -e
          sbt doc
  release:
    if: ${{ github.repository == 'fulcrumgenomics/sopt' && github.ref == 'refs/heads/main' && github.event_name != 'workflow_call' }}
    needs: test
    runs-on: ubuntu-latest
    environment: github-actions
    env:
      SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
      SONATYPE_PASS: ${{ secrets.SONATYPE_PASS }}
      PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
      PGP_SECRET: ${{ secrets.PGP_SECRET }}
    steps:
      - name: Check for secrets.SONATYPE_USER
        if: ${{ env.SONATYPE_USER == '' }}
        run: |
          echo '"SONATYPE_USER" secret not set'
          echo 'please go to "settings > secrets > actions" to create it'
      - name: Check for secrets.SONATYPE_PASS
        if: ${{ env.SONATYPE_PASS == '' }}
        run: |
          echo '"SONATYPE_PASS" secret not set'
          echo 'please go to "settings > secrets > actions" to create it'
      - name: Check for secrets.PGP_PASSPHRASE
        if: ${{ env.PGP_PASSPHRASE== '' }}
        run: |
          echo '"PGP_PASSPHRASE" secret not set'
          echo 'please go to "settings > secrets > actions" to create it'
      - name: Check for secrets.PGP_SECRET
        if: ${{ env.PGP_SECRET== '' }}
        run: |
          echo '"PGP_SECRET" secret not set'
          echo 'please go to "settings > secrets > actions" to create it'
      - name: Export tty
        run: |
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          # To work with the `pull_request` or any other non-`push` even with git-auto-commit
          ref: ${{ github.head_ref }}
      - name: Setup GPG
        shell: bash -l {0}
        run: |
          echo "$PGP_SECRET" | base64 --decode | gpg --import --batch --yes
      - name: Build and sign artifacts
        shell: bash -l {0}
        run: |
          sbt +publishSigned
